<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory on GiddyPoet</title>
    <link>https://giddypoet.github.io/tags/memory/</link>
    <description>Recent content in memory on GiddyPoet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Feb 2022 16:28:39 +0000</lastBuildDate><atom:link href="https://giddypoet.github.io/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一次内存异常问题排查经历</title>
      <link>https://giddypoet.github.io/posts/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E7%BB%8F%E5%8E%86/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Thu, 03 Feb 2022 16:28:39 +0000</pubDate>
      
      <guid>https://giddypoet.github.io/posts/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E7%BB%8F%E5%8E%86/%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E7%BB%8F%E5%8E%86/</guid>
      <description>内存异常现象 在客户现场运行的环境发现服务器内存持续性的增加，设备本身有64g的内存，最终服务器使用了将近80%的内存。
排查思路 使用free -mh查看系统内存占用情况 发现buff/cache占用大量的内存
# 此示例只代表free -mh的结果和实际情况不符，只是记忆中大致数据，显示的就是buff/cache占用大量的内存 [root@TAC ~]# free -mh total used free shared buff/cache available Mem: 62G 6.8G 8G 80M 49G 8G Swap: 31G 0B 31G 大致介绍一下free命令输出的含义
mem 内存使用情况 total 总共 used 已用 free 空闲 shared 共享使用 tmpfs所用的内存 buff/cache buff 内核缓存区所用内存 cache 页面缓存和slab使用的内存（kmalloc） available 预估启动新进程可用内存，不包含交换空间 swap 交换空间使用情况 total used free swap swap space 是磁盘上的一块区域，可以是一个分区，也可以是一个文件。所以具体的实现可以是 swap 分区也可以是 swap 文件。当系统物理内存吃紧时，Linux 会将内存中不常访问的数据保存到 swap 上，这样系统就有更多的物理内存为各个进程服务，而当系统需要访问 swap 上存储的内容时，再将 swap 上的数据加载到内存中，这就是常说的换出和换入。交换空间可以在一定程度上缓解内存不足的情况，但是它需要读写磁盘数据，所以性能不是很高。
现在的机器一般都不太缺内存，如果系统默认还是使用了 swap 是不是会拖累系统的性能？理论上是的，但实际上可能性并不是很大。并且内核提供了一个叫做 swappiness 的参数，用于配置需要将内存中不常用的数据移到 swap 中去的紧迫程度。这个参数的取值范围是 0～100，0 告诉内核尽可能的不要将内存数据移到 swap 中，也即只有在迫不得已的情况下才这么做，而 100 告诉内核只要有可能，尽量的将内存中不常访问的数据移到 swap 中。</description>
      <content>&lt;h2 id=&#34;内存异常现象&#34;&gt;内存异常现象&lt;/h2&gt;
&lt;p&gt;在客户现场运行的环境发现服务器内存持续性的增加，设备本身有64g的内存，最终服务器使用了将近80%的内存。&lt;/p&gt;
&lt;h2 id=&#34;排查思路&#34;&gt;排查思路&lt;/h2&gt;
&lt;h3 id=&#34;使用free--mh查看系统内存占用情况&#34;&gt;使用&lt;code&gt;free -mh&lt;/code&gt;查看系统内存占用情况&lt;/h3&gt;
&lt;p&gt;发现buff/cache占用大量的内存&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 此示例只代表free -mh的结果和实际情况不符，只是记忆中大致数据，显示的就是buff/cache占用大量的内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@TAC ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# free -mh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              total        used        free      shared  buff/cache   available
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Mem:            62G        6.8G         8G         80M        49G         8G
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Swap:           31G          0B         31G
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;大致介绍一下&lt;code&gt;free&lt;/code&gt;命令输出的含义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mem 内存使用情况
&lt;ul&gt;
&lt;li&gt;total 总共&lt;/li&gt;
&lt;li&gt;used 已用&lt;/li&gt;
&lt;li&gt;free 空闲&lt;/li&gt;
&lt;li&gt;shared 共享使用 tmpfs所用的内存&lt;/li&gt;
&lt;li&gt;buff/cache
&lt;ul&gt;
&lt;li&gt;buff 内核缓存区所用内存&lt;/li&gt;
&lt;li&gt;cache 页面缓存和slab使用的内存（kmalloc）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;available 预估启动新进程可用内存，不包含交换空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;swap 交换空间使用情况
&lt;ul&gt;
&lt;li&gt;total&lt;/li&gt;
&lt;li&gt;used&lt;/li&gt;
&lt;li&gt;free&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;swap&#34;&gt;swap&lt;/h4&gt;
&lt;p&gt;swap space 是磁盘上的一块区域，可以是一个分区，也可以是一个文件。所以具体的实现可以是 swap 分区也可以是 swap 文件。当系统物理内存吃紧时，Linux 会将内存中不常访问的数据保存到 swap 上，这样系统就有更多的物理内存为各个进程服务，而当系统需要访问 swap 上存储的内容时，再将 swap 上的数据加载到内存中，这就是常说的换出和换入。交换空间可以在一定程度上缓解内存不足的情况，但是它需要读写磁盘数据，所以性能不是很高。&lt;/p&gt;
&lt;p&gt;现在的机器一般都不太缺内存，如果系统默认还是使用了 swap 是不是会拖累系统的性能？理论上是的，但实际上可能性并不是很大。并且内核提供了一个叫做 swappiness 的参数，用于配置需要将内存中不常用的数据移到 swap 中去的紧迫程度。这个参数的取值范围是 0～100，0 告诉内核尽可能的不要将内存数据移到 swap 中，也即只有在迫不得已的情况下才这么做，而 100 告诉内核只要有可能，尽量的将内存中不常访问的数据移到 swap 中。&lt;/p&gt;
&lt;p&gt;内核参数位置&lt;code&gt;/proc/sys/vm/swappiness&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@TAC ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat /proc/sys/vm/swappiness &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;shared&#34;&gt;shared&lt;/h4&gt;
&lt;p&gt;主要是只tmpfs系统所占用的内存，该文件系统是挂载到内存当中的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 如下tmpfs所占用的的空间，该空间在重启后数据将丢失，内存文件系统&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@TAC tmpfiles.d&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# df -h&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Filesystem      Size  Used Avail Use% Mounted on
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/dev/sda4       3.6T   84G  3.3T   3% /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devtmpfs         32G     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   32G   0% /dev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfs            32G   28K   32G   1% /dev/shm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfs            32G   58M   32G   1% /run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfs            32G     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   32G   0% /sys/fs/cgroup
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/dev/sda2       976M  145M  765M  16% /boot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfs           6.3G     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  6.3G   0% /run/user/0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;内核会动态分配tmpfs的大小&lt;/p&gt;
&lt;h4 id=&#34;buffcache&#34;&gt;buff/cache&lt;/h4&gt;
&lt;p&gt;buffer和cache是两个在计算机技术中被用滥的名词，放在不通语境下会有不同的意义。在Linux的内存管理中，这里的buffer指Linux内存的：Buffer cache。这里的cache指Linux内存中的：Page cache。翻译成中文可以叫做缓冲区缓存和页面缓存。在历史上，它们一个（buffer）被用来当成对io设备写的缓存，而另一个（cache）被用来当作对io设备的读缓存，这里的io设备，主要指的是块设备文件和文件系统上的普通文件。但是现在，它们的意义已经不一样了。在当前的内核中，page cache顾名思义就是针对内存页的缓存，说白了就是，如果有内存是以page进行分配管理的，都可以使用page cache作为其缓存来管理使用。当然，不是所有的内存都是以页（page）进行管理的，也有很多是针对块（block）进行管理的，这部分内存使用如果要用到cache功能，则都集中到buffer cache中来使用。（从这个角度出发，是不是buffer cache改名叫做block cache更好？）然而，也不是所有块（block）都有固定长度，系统上块的长度主要是根据所使用的块设备决定的，而页长度在X86上无论是32位还是64位都是4k。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;buff: block buff针对块（block）进行管理的，这部分内存使用如果要用到cache功能，则都集中到buffer cache中来使用。（不正确的理解，用来读）&lt;/li&gt;
&lt;li&gt;cache: page cache顾名思义就是针对内存页的缓存，说白了就是，如果有内存是以page进行分配管理的，都可以使用page cache作为其缓存来管理使用。（不正确的理解，用来写）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看procsysmeminfo&#34;&gt;查看&lt;code&gt;/proc/sys/meminfo&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;发现buff/cache占用大量内存，则就应该跟进查看具体buff/cache哪个部分占用更为大量的内存
根据meminfo发现大量slab占用内存，将近42个g&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@TAC tmpfiles.d&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat /proc/meminfo &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MemTotal:       &lt;span style=&#34;color:#ae81ff&#34;&gt;65430552&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MemFree:        &lt;span style=&#34;color:#ae81ff&#34;&gt;56802616&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MemAvailable:   &lt;span style=&#34;color:#ae81ff&#34;&gt;57562116&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Buffers:          &lt;span style=&#34;color:#ae81ff&#34;&gt;259960&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cached:           &lt;span style=&#34;color:#ae81ff&#34;&gt;978228&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SwapCached:            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Active:          &lt;span style=&#34;color:#ae81ff&#34;&gt;7181820&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Inactive:         &lt;span style=&#34;color:#ae81ff&#34;&gt;501588&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Active&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;anon&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:    &lt;span style=&#34;color:#ae81ff&#34;&gt;6445436&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Inactive&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;anon&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:    &lt;span style=&#34;color:#ae81ff&#34;&gt;98936&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Active&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:     &lt;span style=&#34;color:#ae81ff&#34;&gt;736384&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Inactive&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;402652&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unevictable:           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Mlocked:               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SwapTotal:      &lt;span style=&#34;color:#ae81ff&#34;&gt;32834556&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SwapFree:       &lt;span style=&#34;color:#ae81ff&#34;&gt;32834556&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dirty:               &lt;span style=&#34;color:#ae81ff&#34;&gt;288&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Writeback:             &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AnonPages:       &lt;span style=&#34;color:#ae81ff&#34;&gt;6445280&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Mapped:           &lt;span style=&#34;color:#ae81ff&#34;&gt;220768&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Shmem:             &lt;span style=&#34;color:#ae81ff&#34;&gt;99160&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Slab:             &lt;span style=&#34;color:#ae81ff&#34;&gt;244800&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SReclaimable:     &lt;span style=&#34;color:#ae81ff&#34;&gt;143828&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SUnreclaim:       &lt;span style=&#34;color:#ae81ff&#34;&gt;100972&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;KernelStack:       &lt;span style=&#34;color:#ae81ff&#34;&gt;23776&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PageTables:        &lt;span style=&#34;color:#ae81ff&#34;&gt;56356&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NFS_Unstable:          &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bounce:                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WritebackTmp:          &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CommitLimit:    &lt;span style=&#34;color:#ae81ff&#34;&gt;65549832&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Committed_AS:   &lt;span style=&#34;color:#ae81ff&#34;&gt;47565480&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VmallocTotal:   &lt;span style=&#34;color:#ae81ff&#34;&gt;34359738367&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VmallocUsed:      &lt;span style=&#34;color:#ae81ff&#34;&gt;469040&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VmallocChunk:   &lt;span style=&#34;color:#ae81ff&#34;&gt;34358892540&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HardwareCorrupted:     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AnonHugePages:   &lt;span style=&#34;color:#ae81ff&#34;&gt;5654528&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HugePages_Total:       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HugePages_Free:        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HugePages_Rsvd:        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HugePages_Surp:        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hugepagesize:       &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DirectMap4k:      &lt;span style=&#34;color:#ae81ff&#34;&gt;257584&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DirectMap2M:     &lt;span style=&#34;color:#ae81ff&#34;&gt;7776256&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DirectMap1G:    &lt;span style=&#34;color:#ae81ff&#34;&gt;60817408&lt;/span&gt; kB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;MemTotal: 所有内存(RAM)大小,减去一些预留空间和内核的大小。&lt;/li&gt;
&lt;li&gt;MemFree: 完全没有用到的物理内存，lowFree+highFree&lt;/li&gt;
&lt;li&gt;MemAvailable: 在不使用交换空间的情况下，启动一个新的应用最大可用内存的大小，计算方式：MemFree+Active(file)+Inactive(file)-(watermark+min(watermark,Active(file)+Inactive(file)/2))&lt;/li&gt;
&lt;li&gt;Buffers: 块设备所占用的缓存页，包括：直接读写块设备以及文件系统元数据(metadata)，比如superblock使用的缓存页。&lt;/li&gt;
&lt;li&gt;Cached: 表示普通文件数据所占用的缓存页。&lt;/li&gt;
&lt;li&gt;SwapCached: swap cache中包含的是被确定要swapping换页，但是尚未写入物理交换区的匿名内存页。那些匿名内存页，比如用户进程malloc申请的内存页是没有关联任何文件的，如果发生swapping换页，这类内存会被写入到交换区。&lt;/li&gt;
&lt;li&gt;Active: active包含active anon和active file&lt;/li&gt;
&lt;li&gt;Inactive: inactive包含inactive anon和inactive file&lt;/li&gt;
&lt;li&gt;Active(anon): anonymous pages（匿名页），用户进程的内存页分为两种：与文件关联的内存页(比如程序文件,数据文件对应的内存页)和与内存无关的内存页（比如进程的堆栈，用malloc申请的内存），前者称为file pages或mapped pages,后者称为匿名页。&lt;/li&gt;
&lt;li&gt;Inactive(anon): 见上&lt;/li&gt;
&lt;li&gt;Active(file): 见上&lt;/li&gt;
&lt;li&gt;Inactive(file): 见上&lt;/li&gt;
&lt;li&gt;SwapTotal: 可用的swap空间的总的大小(swap分区在物理内存不够的情况下，把硬盘空间的一部分释放出来，以供当前程序使用)&lt;/li&gt;
&lt;li&gt;SwapFree: 当前剩余的swap的大小&lt;/li&gt;
&lt;li&gt;Dirty: 需要写入磁盘的内存去的大小&lt;/li&gt;
&lt;li&gt;Writeback: 正在被写回的内存区的大小&lt;/li&gt;
&lt;li&gt;AnonPages: 未映射页的内存的大小&lt;/li&gt;
&lt;li&gt;Mapped: 设备和文件等映射的大小&lt;/li&gt;
&lt;li&gt;Slab: 内核数据结构slab的大小&lt;/li&gt;
&lt;li&gt;SReclaimable: 可回收的slab的大小&lt;/li&gt;
&lt;li&gt;SUnreclaim: 不可回收的slab的大小&lt;/li&gt;
&lt;li&gt;PageTables: 管理内存页页面的大小&lt;/li&gt;
&lt;li&gt;NFS_Unstable: 不稳定页表的大小&lt;/li&gt;
&lt;li&gt;VmallocTotal: Vmalloc内存区的大小&lt;/li&gt;
&lt;li&gt;VmallocUsed: 已用Vmalloc内存区的大小&lt;/li&gt;
&lt;li&gt;VmallocChunk: vmalloc区可用的连续最大快的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;slabtop查看为什么slab占用大量内存&#34;&gt;slabtop查看为什么slab占用大量内存&lt;/h3&gt;
&lt;p&gt;根据slabtop现场发现，大量kmalloc-2048占用大量内存，大概率是由于内核新加的一个驱动程序异常导致内存被大量占用，卸载后恢复正常&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@TAC tmpfiles.d&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# slabtop &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Active / Total Objects &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;% used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    : &lt;span style=&#34;color:#ae81ff&#34;&gt;972765&lt;/span&gt; / &lt;span style=&#34;color:#ae81ff&#34;&gt;979478&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;99.3%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Active / Total Slabs &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;% used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;      : &lt;span style=&#34;color:#ae81ff&#34;&gt;21676&lt;/span&gt; / &lt;span style=&#34;color:#ae81ff&#34;&gt;21676&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;100.0%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Active / Total Caches &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;% used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;     : &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; / &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;70.0%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Active / Total Size &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;% used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;       : 238632.48K / 242106.66K &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;98.6%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Minimum / Average / Maximum Object : 0.01K / 0.25K / 12.62K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME                   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;224532&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;224197&lt;/span&gt;  99%    0.19K   5346	 &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;     42768K dentry
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;159393&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;159393&lt;/span&gt; 100%    0.10K   4087	 &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;     16348K buffer_head
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;65052&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;65052&lt;/span&gt; 100%    0.11K   1807	 36	 7228K kernfs_node_cache
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;58432&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;56763&lt;/span&gt;  97%    0.06K    913	 64	 3652K kmalloc-64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51119&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;51119&lt;/span&gt; 100%    1.01K   1649	 &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;     52768K ext4_inode_cache
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42587&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;42587&lt;/span&gt; 100%    0.21K   1151	 37	 9208K vm_area_struct
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32946&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32946&lt;/span&gt; 100%    0.04K    323	102	 1292K ext4_extent_status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32538&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32538&lt;/span&gt; 100%    0.04K    319	102	 1276K selinux_inode_security
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29580&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29580&lt;/span&gt; 100%    0.13K    493	 60	 3944K ext4_groupinfo_4k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26880&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;26880&lt;/span&gt; 100%    0.19K    640	 42	 5120K kmalloc-192
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24320&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23098&lt;/span&gt;  94%    0.25K    380	 64	 6080K kmalloc-256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23856&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23856&lt;/span&gt; 100%    0.07K    426	 56	 1704K Acpi-ParseExt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21930&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21291&lt;/span&gt;  97%    0.08K    430	 51	 1720K anon_vma
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21824&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21824&lt;/span&gt; 100%    0.50K    341	 &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;     10912K kmalloc-512
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17920&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17920&lt;/span&gt; 100%    0.01K     35	512	  140K kmalloc-8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16640&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16640&lt;/span&gt; 100%    0.02K     65	256	  260K kmalloc-16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14847&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;14528&lt;/span&gt;  97%    0.64K    303	 49	 9696K proc_inode_cache
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13200&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11762&lt;/span&gt;  89%    0.58K    240	 55	 7680K inode_cache
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9912&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9912&lt;/span&gt; 100%    0.57K    177	 56	 5664K radix_tree_node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9088&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9088&lt;/span&gt; 100%    0.03K     71	128	  284K kmalloc-32
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8896&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;8708&lt;/span&gt;  97%    1.00K    278	 32	 8896K kmalloc-1024
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7308&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;7308&lt;/span&gt; 100%    0.09K    174	 42	  696K kmalloc-96
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5952&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;5952&lt;/span&gt; 100%    0.12K     93	 64	  744K kmalloc-128
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4672&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4672&lt;/span&gt; 100%    0.06K     73	 64	  292K ext4_free_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4590&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4590&lt;/span&gt; 100%    0.05K     54	 85	  216K shared_policy_node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3468&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3468&lt;/span&gt; 100%    0.62K     68	 51	 2176K sock_inode_cache
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
